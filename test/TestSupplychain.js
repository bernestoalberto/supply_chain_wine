// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact

var SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originGrapeGrowerID = accounts[1]
    const originGrapeGrowerName = "John Doe"
    const originGrapeGrowerInformation = "Yarray Valley"
    const originGrapeGrowerLatitude = "-38.239770"
    const originGrapeGrowerLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    console.log(`Price ${productPrice}`);
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    //Available Accounts
    //==================
    // (0) 0x7311bd9c8e5a3d46f3d36d8e99820682335fb949 (~100 ETH)
    // (1) 0xaddc2954a1759bd8207ba7d3e69ecf0daa1539ff (~100 ETH)
    // (2) 0xdc196587b59a8accbab502a642ce96ae71e017e1 (~100 ETH)
    // (3) 0xfa937f92f8a106dcac3f3d2d8930e07e540a596d (~100 ETH)
    // (4) 0xbf5f1efcd38b90231d1bc6694f7eb54135c989f3 (~100 ETH)
    // (5) 0xd69ba0709d161543fa19fa67c2e3ee95da33fb72 (~100 ETH)
    // (6) 0x4ae0f84a7ad98e6cd3d8c11a7f4e5d9398d364e8 (~100 ETH)
   // (7) 0xa0484f82c2b4aa9ad9d5ef2bf8fdcad63ea0ddfb (~100 ETH)
   // (8) 0xffd3b6febbd109a57ba1eea998f3bdd84d81cd77 (~100 ETH)
   // (9) 0x26e68a87dc4040fdec8aa62f1f8c5c7b2706eec9 (~100 ETH)

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", ownerID)
    console.log("GrapeGrower: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a Grape Grower to harvest wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false
        
        // Watch the emitted event Harvested()
        let event = supplyChain.Harvested(upc);
        await event.watch((err, res) => {
            
            eventEmitted = true;
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originGrapeGrowerID, 
            originGrapeGrowerName, originGrapeGrowerInformation,
             originGrapeGrowerLatitude, originGrapeGrowerLongitude,
              productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originGrapeGrowerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originGrapeGrowerID, 'Error: Missing or Invalid originGrapeGrowererID')
        assert.equal(resultBufferOne[4], originGrapeGrowerName, 'Error: Missing or Invalid originGrapeGrowerName')
        assert.equal(resultBufferOne[5], originGrapeGrowerInformation, 'Error: Missing or Invalid originGrapeGrowerInformation')
        assert.equal(resultBufferOne[6], originGrapeGrowerLatitude, 'Error: Missing or Invalid originGrapeGrowerLatitude')
        assert.equal(resultBufferOne[7], originGrapeGrowerLongitude, 'Error: Missing or Invalid originGrapeGrowerLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a GrapeGrower to process wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
   
        
        // Watch the emitted event Processed()
        let event1 = supplyChain.Processed(upc);
        await event1.watch((err, res)=>{
            if(err)console.log(err);
            console.log(res);
            eventEmitted = true
      }) 
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc);

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const itemFetched =  await supplyChain.fetchItemBufferOne(upc);

        // Verify the result set
        assert.equal(itemFetched, upc, 'Item processed ');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a GrapeGrower to pack wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
         let eventEmitted  = false;
        
        // Watch the emitted event Packed()
        let event2 = supplyChain.Packed(upc);
        await event2.watch((err,res)=>{
            if(err)console.log(err);
            console.log(res);
           eventEmitted=true;
           
        });

        // Mark an item as Packed by calling function packItem()
        supplyChain.packItem(upc);
     
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const itemFetched = supplyChain.fetchItemBufferOne(upc);

        // Verify the result set
        // Verify the result set
        assert.equal(itemFetched, upc, 'Item processed ');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a distributor to sell wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event ForSale()
        let event4 = supplyChain.ForSale(upc);
        await event4.watch((err,res)=>{
            if(err)console.log(err);
            console.log(res);
            eventEmitted=true;
         });
        // Mark an item as ForSale by calling function sellItem()
        supplyChain.sellItem(upc);
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        const itemFetched = supplyChain.fetchItemBufferOne(upc);
        // Verify the result set
        assert.equal(itemFetched, upc, 'Item processed ');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event Sold()
        let event5 = supplyChain.Sold(upc);
        await event5.watch((err,res)=>{
            if(err)console.log(err);
            console.log(res);
            eventEmitted=true;
         });

        // Mark an item as Sold by calling function buyItem()
           supplyChain.buyItem(upc);

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        const item = supplyChain.fetchItemBufferTwo(upc);
        // Verify the result set
        assert.equal(itemFetched, item, 'Item processed ');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        let eventEmitted = false;
        // Watch the emitted event Shipped()
        let event6 = supplyChain.Shipped(upc);
        await event6.watch((err,res)=>{
            if(err)console.log(err);
            console.log(res);
            eventEmitted=true;
         });
        // Mark an item as Sold by calling function buyItem()
        
               supplyChain.buyItem(upc);
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = supplyChain.fetchItemBufferTwo(upc);

        // Verify the result set
        assert.equal(itemFetched, item, 'Item processed ');
        assert.equal(eventEmitted, true, 'Invalid event emitted');    
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark wine received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let event = false;
        
        // Watch the emitted event Received()
        let event7 = supplyChain.Received(upc);
        await event7.watch((err,res)=>{
            if(err)console.log(err);
            console.log(res);
            eventEmitted=true;
         });
        // Mark an item as Sold by calling function buyItem()
         
         supplyChain.buyItem(upc);

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = supplyChain.fetchItemBufferTwo(upc);

        // Verify the result set
        assert.equal(itemFetched, item, 'Item processed ');
        assert.equal(eventEmitted, true, 'Invalid event emitted'); 
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event Purchased()
         let event8=  supplyChain.Purchased(upc);
         await event8.watch((err,res)=>{
            if(err)console.log(err);
            console.log(res);
            eventEmitted=true;
         });
        // Mark an item as Sold by calling function buyItem()
        
        supplyChain.buyItem(upc);
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        const item = supplyChain.fetchItemBufferTwo(upc);
        // Verify the result set
        assert.equal(itemFetched, item, 'Item processed ');
        assert.equal(eventEmitted, true, 'Invalid event emitted'); 
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        const item = supplyChain.fetchItemBufferTwo(upc);
        // Verify the result set:
        assert.equal(itemFetched, item, 'Item processed ');
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const item = supplyChain.fetchItemBufferOne(upc);
        
        // Verify the result set:
        assert.equal(itemFetched, item, 'Item processed ');
    })

});

